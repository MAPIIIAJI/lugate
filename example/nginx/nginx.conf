user www;

worker_processes  auto;

error_log  /var/log/nginx/error.log;

pid        /var/log/nginx/nginx.pid;

events {
    worker_connections  4096;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log  /var/log/nginx/access.log;

    #sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # gateway
    server {
        listen       80;
        server_name  gateway.lugate.loc;

        access_log  /var/log/nginx/gateway_access.log;
        error_log  /var/log/nginx/gateway_error.log;

        location / {
              # MIME type determined by default_type:
              default_type 'application/json';

              content_by_lua_block {
                -- POST request
                if 'POST' == ngx.req.get_method() then
                  -- Load lugate module
                  local Lugate = require "lugate"

                  -- Get request body
                  ngx.req.read_body() -- explicitly read the req body
                  local body = ngx.req.get_body_data()
                  -- Get new lugate instance
                  local lugate = Lugate:new({
                    body = body,
                    routes = {
                      ["^v1%..+"] = "/v1",
                      ["^v2%..+"] = "/v2",
                    }
                  })

                  -- Loop requests
                  ngx_requests = {}
                  for _, request in ipairs(lugate:get_requests()) do
                    if request:is_valid() then
                      table.insert(ngx_requests,request:get_ngx_request())
                    else
                      ngx.say('{"jsonrpc":"2.0","error":{"code":-32700,"message":"Invalid JSON was received by the server.An error occurred on the server while parsing the JSON text.","data":[]},"id":null}')
                      return
                    end
                  end

                  -- Send multi requst and get multi response
                  responses = {ngx.location.capture_multi(ngx_requests)}
                  batch_responses = {}
                  for _, response in ipairs(responses) do
                    if 200 == response.status then
                      response_body = string.gsub(response.body, '%s$', '')
                      response_body = string.gsub(response_body, '^%s', '')
                      table.insert(batch_responses, response_body)
                    else
                      table.insert(batch_responses, '{"jsonrpc":"2.0","error":{"code":-32603,"message":"Internal JSON-RPC error.","data":[]},"id":null}')
                    end
                  end

                  -- Print responses
                  if 1 == #batch_responses then
                    ngx.say(batch_responses[1])
                  else
                    ngx.print('[' .. table.concat(batch_responses, ",") .. ']')
                  end

                  return

                else
                  ngx.say('{"jsonrpc":"2.0","error":{"code":-32601,"message":"Only POST requests are allowed","data":[]},"id":null}')
                  return
                end
              }
        }

        location /v1 {
            proxy_pass       http://service01.lugate.loc;
            proxy_set_header Host service01.lugate.loc;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /v2 {
            proxy_pass       http://service02.lugate.loc;
            proxy_set_header Host service02.lugate.loc;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

    # service01
    server {
        listen       80;
        server_name  service01.lugate.loc;

        access_log  /var/log/nginx/service01_access.log;
        error_log  /var/log/nginx/service01_error.log;

        location / {
              # MIME type determined by default_type:
              default_type 'application/json';

              content_by_lua_block {
                 ngx.say('Lugate service01!')
              }
        }
    }

    # service02
    server {
        listen       80;
        server_name  service02.lugate.loc;

        access_log  /var/log/nginx/service02_access.log;
        error_log  /var/log/nginx/service02_error.log;

        location / {
              # MIME type determined by default_type:
              default_type 'application/json';

              content_by_lua_block {
                 ngx.say('Lugate service02!')
              }
        }
    }


    # service03
    server {
        listen       80;
        server_name  service03.lugate.loc;

        access_log  /var/log/nginx/service03_access.log;
        error_log  /var/log/nginx/service03_error.log;

        location / {
              # MIME type determined by default_type:
              default_type 'application/json';

              content_by_lua_block {
                 ngx.say('Lugate service03!')
              }
        }
    }

}
