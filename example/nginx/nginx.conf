user www;

worker_processes  auto;

error_log  /var/log/nginx/error.log;

pid        /var/log/nginx/nginx.pid;

events {
    worker_connections  4096;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log  /var/log/nginx/access.log;

    #sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream v1 {
      server service03.lugate.loc;
      server service01.lugate.loc;
    }

    upstream v2 {
      server service02.lugate.loc;
    }

    # gateway
    server {
        listen       80;
        server_name  gateway.lugate.loc;

        access_log  /var/log/nginx/gateway_access.log;
        error_log  /var/log/nginx/gateway_error.log;

        location / {
              # MIME type determined by default_type:
              default_type 'application/json';

              content_by_lua_block {
                  -- Load lugate module
                  local Lugate = require "lugate"

                  -- Get new lugate instance
                  local lugate = Lugate:init({
                    routes = {
                      ['v1%.([^%.]+).*'] = '/v1.%1', -- v1.math.subtract -> /v1.math
                      ['v2%.([^%.]+).*'] = '/v2.%1', -- v2.math.addition -> /v2.math
                    }
                  })

                  -- Send multi requst and get multi response
                  responses = {ngx.location.capture_multi(lugate:get_ngx_requests())}
                  batch_responses = {}
                  for _, response in ipairs(responses) do
                    lugate:add_response(response)
                  end

                  -- Print responses
                  lugate:print_responses()
              }
        }

        location /v1 {
            proxy_pass       http://v1;
            proxy_set_header Host service01;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /v2 {
            proxy_pass       http://v2;
            proxy_set_header Host service02;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

    # service01
    server {
        listen       80;
        server_name  service01.lugate.loc service01;

        access_log  /var/log/nginx/service01_access.log;
        error_log  /var/log/nginx/service01_error.log;

        location / {
              # MIME type determined by default_type:
              default_type 'application/json';

              content_by_lua_block {
                 ngx.say('{"jsonrpc": "2.0", "result": [19, "server01"], "id": 1}')
              }
        }
    }

    # service02
    server {
        listen       80;
        server_name  service02.lugate.loc service02;

        access_log  /var/log/nginx/service02_access.log;
        error_log  /var/log/nginx/service02_error.log;

        location / {
              # MIME type determined by default_type:
              default_type 'application/json';

              content_by_lua_block {
                 ngx.say('{"jsonrpc": "2.0", "result": [-19, "server02"], "id": 2}')
              }
        }
    }


    # service03
    server {
        listen       80;
        server_name  service03.lugate.loc service01;

        access_log  /var/log/nginx/service03_access.log;
        error_log  /var/log/nginx/service03_error.log;

        location / {
              # MIME type determined by default_type:
              default_type 'application/json';

              content_by_lua_block {
                 ngx.say('{"jsonrpc": "2.0", "result": [19, "server03"], "id": 1}')
              }
        }
    }

}
